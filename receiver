# -*- coding: utf-8 -*-
# Python 2.7
# Receiver logic: variables and process aligned with original Receiver

from link import Ack

class Receiver(object):
    def __init__(self):
        self.last_seq_num = -1           # largest in-order received sequence
        self.received_packets = {}       # out-of-order buffer: seq -> {Data info}
        self.window_size = 100           # kept but not enforced in this simulation
        self.ack_count = 0               # duplicate ACK counter
        self.sent_ack = -1               # last ACKed sequence

    def on_data(self, data_pkt):
        """
        Input: link.Data
        Output: link.Ack
        """
        seq = data_pkt.seq_num

        if seq <= self.last_seq_num:
            # Old packet: duplicate ACK
            ack = self._make_ack(self.last_seq_num, data_pkt)
            self.ack_count += 1
            self.sent_ack = ack.seq_num
            return ack

        # Buffer it
        self.received_packets[seq] = {
            'send_ts': data_pkt.send_ts,
            'sent_bytes': data_pkt.sent_bytes,
            'delivered_time': data_pkt.delivered_time,
            'delivered': data_pkt.delivered
        }

        # Try to advance
        advanced = False
        while (self.last_seq_num + 1) in self.received_packets:
            self.last_seq_num += 1
            self.received_packets.pop(self.last_seq_num, None)
            advanced = True

        # Build cumulative ACK (if not advanced, it's duplicate ACK)
        ack = self._make_ack(self.last_seq_num, data_pkt)
        if advanced:
            self.ack_count = 0
            self.sent_ack = ack.seq_num
        else:
            self.ack_count += 1
        return ack

    def _make_ack(self, ack_seq, data_pkt):
        """
        To align with original code, ACK includes:
          - seq_num: cumulative ACK sequence
          - send_ts: echo send timestamp for RTT (use data's send_ts here)
          - sent_bytes / delivered_time / delivered: copied from Data
          - ack_bytes: approx as data length (or fixed 60)
        """
        return Ack(
            seq_num=ack_seq,
            send_ts=data_pkt.send_ts,
            sent_bytes=data_pkt.sent_bytes,
            delivered_time=data_pkt.delivered_time,
            delivered=data_pkt.delivered,
            ack_bytes=data_pkt.sent_bytes  # approx: use data size as ack_bytes
        )
