好的，我们将基于你之前的设计理念，使用 纯 Python + UDP 协议 + 模拟逻辑 实现一个 TCP 协议仿真框架，其特点为：
	•	不实际发送网络数据包（即不使用 socket.sendto()）
	•	仅模拟数据包的发送、延迟、确认、重传等过程
	•	模拟 RTT、RTO、ACK、丢包、窗口等 TCP 机制
	•	可以作为你RL/TCP算法的离线调试或算法原型环境

⸻

✅ 模拟框架结构

模块	功能
Sender	模拟发送窗口、RTO 超时、ACK响应等
Receiver	模拟ACK生成、顺序控制、ACK延迟
NetworkSim	控制链路延迟、丢包、数据在链路中转发


⸻

📁 文件结构（单个文件可运行）

# simulate_tcp.py


⸻

✅ 模拟配置参数（全局）

import time
import random
import heapq

# 模拟配置
SIM_TIME = 5000           # 模拟总时间(ms)
RTT_BASE = 100            # 基本 RTT(ms)
DELAY_JITTER = 30         # 抖动范围(+/-)
LOSS_RATE = 0.1           # 丢包概率
MAX_SEQ = 1000            # 最大模拟序号
INIT_RTO = 200            # 初始 RTO
CWND_INIT = 3             # 初始窗口
SEND_INTERVAL = 50        # 每个包发送间隔(ms)


⸻

🧠 模拟网络：NetworkSimulator

class NetworkSimulator:
    def __init__(self):
        self.event_queue = []  # 使用小根堆模拟调度队列

    def send(self, delay_ms, callback, *args):
        """将事件加入事件队列（模拟包在链路上）"""
        event_time = current_time + delay_ms
        heapq.heappush(self.event_queue, (event_time, callback, args))

    def run(self):
        global current_time
        while self.event_queue and current_time <= SIM_TIME:
            event_time, callback, args = heapq.heappop(self.event_queue)
            current_time = event_time
            callback(*args)


⸻

📤 模拟发送端：Sender

class Sender:
    def __init__(self, receiver, net):
        self.receiver = receiver
        self.net = net
        self.seq_num = 0
        self.unacked = {}  # {seq_num: (send_ts, rto)}
        self.cwnd = CWND_INIT
        self.rto = INIT_RTO
        self.srtt = None
        self.rttvar = None
        self.timer = None

    def send_data(self):
        while len(self.unacked) < self.cwnd and self.seq_num < MAX_SEQ:
            seq = self.seq_num
            self.seq_num += 1
            send_ts = current_time
            self.unacked[seq] = (send_ts, self.rto)
            print(f"[{current_time} ms] Send packet {seq}")

            # 模拟网络延迟 & 丢包
            if random.random() > LOSS_RATE:
                delay = RTT_BASE / 2 + random.randint(-DELAY_JITTER, DELAY_JITTER)
                self.net.send(delay, self.receiver.receive, seq, send_ts, self)

            # 安排超时重传事件
            self.net.send(self.rto, self.timeout_retransmit, seq)

    def receive_ack(self, ack_seq, ack_ts):
        if ack_seq in self.unacked:
            send_ts, _ = self.unacked.pop(ack_seq)
            rtt = current_time - send_ts
            print(f"[{current_time} ms] ACK {ack_seq} received, RTT = {rtt} ms")

            # RTT估计 & RTO调整（RFC6298）
            if self.srtt is None:
                self.srtt = rtt
                self.rttvar = rtt / 2
            else:
                self.rttvar = 0.75 * self.rttvar + 0.25 * abs(self.srtt - rtt)
                self.srtt = 0.875 * self.srtt + 0.125 * rtt
            self.rto = int(self.srtt + 4 * self.rttvar)
            self.rto = max(self.rto, 100)

        self.send_data()  # 继续填满窗口

    def timeout_retransmit(self, seq):
        if seq in self.unacked:
            print(f"[{current_time} ms] Timeout for packet {seq}, RTO = {self.rto} ms")
            send_ts = current_time
            self.unacked[seq] = (send_ts, self.rto)
            if random.random() > LOSS_RATE:
                delay = RTT_BASE / 2 + random.randint(-DELAY_JITTER, DELAY_JITTER)
                self.net.send(delay, self.receiver.receive, seq, send_ts, self)
            self.net.send(self.rto, self.timeout_retransmit, seq)


⸻

📥 模拟接收端：Receiver

class Receiver:
    def __init__(self, net):
        self.net = net
        self.expected_seq = 0

    def receive(self, seq, send_ts, sender):
        if seq == self.expected_seq:
            print(f"[{current_time} ms] Receiver got expected seq {seq}")
            self.expected_seq += 1
        else:
            print(f"[{current_time} ms] Receiver got out-of-order seq {seq} (expecting {self.expected_seq})")

        # 回ACK（模拟 ACK 延迟 + 不丢包）
        ack_delay = RTT_BASE / 2 + random.randint(-DELAY_JITTER, DELAY_JITTER)
        self.net.send(ack_delay, sender.receive_ack, seq, send_ts)


⸻

▶️ 主函数运行入口

if __name__ == "__main__":
    current_time = 0  # 全局模拟时间(ms)

    net = NetworkSimulator()
    receiver = Receiver(net)
    sender = Sender(receiver, net)

    # 启动初始发送
    net.send(0, sender.send_data)

    # 模拟主循环
    net.run()


⸻

✅ 输出示例（部分）

[0 ms] Send packet 0
[0 ms] Send packet 1
[0 ms] Send packet 2
[54 ms] Receiver got expected seq 0
[105 ms] ACK 0 received, RTT = 105 ms
[105 ms] Send packet 3
...
[371 ms] Timeout for packet 2, RTO = 260 ms
[426 ms] ACK 1 received, RTT = 140 ms


⸻

✅ 总结：该模拟具备以下特点

特性	状态
RTT & RTO	✔ 模拟更新
Delay 抖动	✔ 随机延迟
Packet Loss	✔ 丢包模拟
Fast Retrans	❌（可扩展）
Sliding cwnd	✔ 发送窗口
重传计时器	✔ per-packet


⸻

是否需要我：
	•	✍️ 加入重复 ACK 和快速重传机制？
	•	🧪 加入 throughput / loss rate 的实时评估输出？
	•	📁 保存为 CSV 做可视化分析？

告诉我你的下一步目标，我可以继续优化这个模拟器。
